question 
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their 
nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example:
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807

my answer:

class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        result=ListNode(0)
        temp=result
        while(True):
            if(l1!=None):
                v1=l1.val
                l1=l1.next
            else:
                v1=0
            if(l2!=None):
                v2=l2.val
                l2=l2.next
            else:
                v2=0
            re=v1+v2+temp.val
            temp.val=re%10
            
            if (l1==None and l2==None):
                if (re//10==1):
                    temp.next=ListNode(re//10)
                break
            
            temp.next=ListNode(re//10)
            nextt=temp.next
            temp=nextt
            
        return result
		
gaibian
